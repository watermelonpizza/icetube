// <auto-generated />
using System;
using IceTube;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IceTube.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180708084110_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846");

            modelBuilder.Entity("IceTube.DataModels.GoogleDataStoreObject", b =>
                {
                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<string>("SourceType");

                    b.HasKey("Key");

                    b.ToTable("GoogleDataStores");
                });

            modelBuilder.Entity("IceTube.DataModels.IceTubeTask", b =>
                {
                    b.Property<string>("TaskName")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("LastRan");

                    b.Property<string>("LastRanStatus");

                    b.Property<bool?>("LastRanSuccess");

                    b.HasKey("TaskName");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("IceTube.DataModels.YoutubeChannel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("Inactive");

                    b.Property<DateTime>("LastCheckedAt");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("IceTube.DataModels.YoutubeVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActivityId");

                    b.Property<DateTime>("AddedAt");

                    b.Property<string>("ChannelId");

                    b.Property<string>("Description");

                    b.Property<bool>("DownloadError");

                    b.Property<string>("DownloadErrorDetails");

                    b.Property<int>("DownloadState");

                    b.Property<DateTime?>("FinishedDownloadAt");

                    b.Property<DateTime?>("PublishedAt");

                    b.Property<DateTime?>("StartedDownloadAt");

                    b.Property<string>("ThumbnailUrl");

                    b.Property<string>("Title");

                    b.Property<string>("VideoId");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("IceTube.DataModels.YoutubeVideo", b =>
                {
                    b.HasOne("IceTube.DataModels.YoutubeChannel", "Channel")
                        .WithMany("Videos")
                        .HasForeignKey("ChannelId");
                });
#pragma warning restore 612, 618
        }
    }
}
